define("validate",["underscore"],function(e){return function(n){if(e.has(n,"Validation")){if(!1===e.isArray(n.Validation))throw{message:"Error: Validation type was not array!"};if(!1===e.every(n.Validation,function(n){return e.isFunction(n)})&&!1===e.isEmpty(n.Validation))throw{message:"Error: Validation element type was not function!"};return e.every(n.Validation,function(e){return e(n.Data)})}}}),define("parseValidation",[],function(){return[function(e){if("string"!=typeof e.Options)throw{message:"Error: The input type was not string."};if(null==e.Options.match(/^.*define\(.*\);\s*$/gim))throw{message:"Error: Module does not contain a valid define statement."};if(null==e.Options.match(/^.*define\(.*({.*}|function\s*\(.*\)\s*{.*})\s*\);\s*$/gim))throw{message:"Error: The define statement has no content."};return!0},function(e){if(JSON.stringify(Object.keys(e.Object))!=JSON.stringify(["Headers","Name","Dependencies","Exports","Content"]))throw{message:"Error: The context was not a valid module."};return!0}]}),define("parse",["validate","parseValidation"],function(e,n){return function(t){var i=this;e({Validation:n,Data:{Options:t,Object:i}});var s=new RegExp(/^([\s\S]*)define\((.*)\);\s*$/i).exec(t);i.Headers=s[1];var r=new RegExp(/^\s*('.+'|".+")?,?\s*(\[[\s\S]*\])?,?\s*(function\([\s\S]*\)\s*{[\s\S]*}|{[\s\S]*})\s*$/i).exec(s[2]).splice(1).filter(function(e){return Boolean(e)});if(1==r.length)i.Content=r[0];else if(2==r.length)if(i.Content=r[1],r[0].match(/^\s*('.+'|".+")\s*$/))i.Name=r[0].replace(/'|"/g,"");else{if(!r[0].match(/^\[[\s\S]*\]$/))throw{message:"The first argument of the define statement was not valid."};i.Dependencies=JSON.parse(r[0].replace(/'|"/g,'"')),r[1].match(/^function\(([\s\S]+)\)\s*{[\s\S]*}$/i)&&(i.Exports=new RegExp(/^function\(([\s\S]+)\)\s*{[\s\S]*}$/i).exec(r[1])[1].split(",").map(function(e){return new RegExp(/^\s*(\S+)\s*$/).exec(e)[1]}))}else{if(3!=r.length)throw{message:"Error: Invalid number of define arguments."};i.Name=r[0].replace(/'|"/g,""),i.Dependencies=JSON.parse(r[1].replace(/'|"/g,'"')),i.Content=r[2],r[2].match(/^function\(([\s\S]+)\)\s*{[\s\S]*}$/i)&&(i.Exports=new RegExp(/^function\(([\s\S]+)\)\s*{[\s\S]*}$/i).exec(r[2])[1].split(",").map(function(e){return new RegExp(/^\s*(\S+)\s*$/).exec(e)[1]}))}return i}});